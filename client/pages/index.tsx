import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState, useEffect } from "react";
import type { BasicProfile } from "@datamodels/identity-profile-basic";
import ceramicLogo from "../public/ceramic.png";
import { useCeramicContext } from "../context";
import { authenticateCeramic } from "../utils";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const clients = useCeramicContext();
  const { ceramic, composeClient } = clients;
  const [profile, setProfile] = useState<BasicProfile | undefined>();
  const [loading, setLoading] = useState<boolean>(false);
  const [loadLight, setLoadLight] = useState<boolean>(false);
  const [loadDark, setLoadDark] = useState<boolean>(false);
  const [sessionDID, setSessionDID] = useState<string | undefined>();
  const [mode, setMode] = useState<string | undefined>();

  const handleLogin = async () => {
    const did = await authenticateCeramic(ceramic, composeClient);
    const session = did.id;
    if (session) {
      setSessionDID(session);
    }
  };

  const setLight = async () => {
    setLoadLight(true);
    if (ceramic.did !== undefined) {
      const update = await fetch("http://localhost:5005/graphql", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },

        body: JSON.stringify({
          query: `mutation {
            createModeSetting(
              input: {
                content: {
                  mode: LIGHT
                }
              }
            ) {
              document {
                author{
                  id
                }
                id
                mode
              }
              
            }
          }`,
        }),
      });
      if (update.status === 200) {
        const result = await update.json();
        const stringified = JSON.stringify(result.data.createModeSetting);
        setMode(stringified);
      }
      setLoadLight(false);
    }
  };

  const setDark = async () => {
    setLoadDark(true);
    if (ceramic.did !== undefined) {
      const update = await fetch("http://localhost:5005/graphql", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },

        body: JSON.stringify({
          query: `mutation {
            createModeSetting(
              input: {
                content: {
                  mode: DARK
                }
              }
            ) {
              document {
                author{
                  id
                }
                id
                mode
              }
              
            }
          }`,
        }),
      });
      if (update.status === 200) {
        const result = await update.json();
        const stringified = JSON.stringify(result.data.createModeSetting);
        setMode(stringified);
      }
      setLoadDark(false);
    }
  };

  /**
   * On load check if there is a DID-Session in local storage.
   * If there is a DID-Session we can immediately authenticate the user.
   * For more details on how we do this check the 'authenticateCeramic function in`../utils`.
   */
  useEffect(() => {
    if (localStorage.getItem("did")) {
      handleLogin();
    } else {
    }
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create ceramic app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Example Route</h1>
        <Image
          src={ceramicLogo}
          alt="Ceramic"
          width="100"
          height="100"
          className={styles.logo}
        />
        {sessionDID === undefined ? (
          <button
            onClick={() => {
              handleLogin();
            }}
          >
            Login
          </button>
        ) : (
          <>
            <div style={{"marginBottom": "1rem"}} className={styles.form}>
              <button
                onClick={() => {
                  setDark();
                }}
              >
                {loadDark ? "Loading..." : "Set Dark"}
              </button>
              <button
                onClick={() => {
                  setLight();
                }}
              >
                {loadLight ? "Loading..." : "Set Light"}
              </button>
            </div>
            <textarea
              value={mode}
              style={{
                width: "75%",
                height: "40%",
                borderRadius: "5%",
                padding: "2%",
              }}
            ></textarea>
          </>
        )}
      </main>
    </div>
  );
};

export default Home;
